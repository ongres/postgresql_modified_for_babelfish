create table t1(a int);
go
create table t2(a int);
go
create procedure sp_trancount as
select @@trancount;
GO
create procedure sp_commit_no_begin as
insert into t1 values(3);
commit;
select * from t1;
GO
create procedure sp_rollback_no_begin as
insert into t1 values(4);
rollback;
select * from t1;
GO
create procedure sp_rollback_with_begin as
begin tran;
insert into t1 values(4);
rollback;
select * from t1;
go

select @@trancount;
go
~~START~~
int
0
~~END~~

-- trancount inside normal EXEC should be same as outside
exec sp_trancount;
go
~~START~~
int
0
~~END~~

-- trancount inside INSERT-EXEC should be 1 more than outside
insert into t1 exec sp_trancount;
go
~~ROW COUNT: 1~~

select * from t1;
go
~~START~~
int
1
~~END~~

delete t1;
go
~~ROW COUNT: 1~~


-- zero level - normal EXEC should succeed with warning for no BEGIN TRAN on the
-- COMMIT
exec sp_commit_no_begin;
go
~~ROW COUNT: 1~~

~~ERROR (Code: 3902)~~

~~ERROR (Message: COMMIT can only be used in transaction blocks)~~

~~START~~
int
3
~~END~~

-- zero level - INSERT-EXEC should fail with error message about the COMMIT
-- inside INSERT-EXEC must have a BEGIN TRAN
delete t1;
go
~~ROW COUNT: 1~~

insert into t2 exec sp_commit_no_begin;
go
~~ERROR (Code: 4)~~

~~ERROR (Message: Cannot use the COMMIT statement within an INSERT-EXEC statement unless BEGIN TRANSACTION is used first.)~~

select count(*) from t1;
select count(*) from t2;
go
~~START~~
int
0
~~END~~

~~START~~
int
0
~~END~~


-- one level - should fail and abort that level of transaction
begin tran;
go
select @@trancount;
go
~~START~~
int
1
~~END~~

insert into t2 execute sp_commit_no_begin;
go
~~ERROR (Code: 4)~~

~~ERROR (Message: Cannot use the COMMIT statement within an INSERT-EXEC statement unless BEGIN TRANSACTION is used first.)~~

select @@trancount;
go
~~START~~
int
0
~~END~~

select count(*) from t1;
select count(*) from t2;
go
~~START~~
int
0
~~END~~

~~START~~
int
0
~~END~~


-- previous level aborted, this should be the same as before
begin tran;
go
select @@trancount;
go
~~START~~
int
1
~~END~~

insert into t2 execute sp_commit_no_begin;
go
~~ERROR (Code: 4)~~

~~ERROR (Message: Cannot use the COMMIT statement within an INSERT-EXEC statement unless BEGIN TRANSACTION is used first.)~~

select count(*) from t1;
select count(*) from t2;
go
~~START~~
int
0
~~END~~

~~START~~
int
0
~~END~~


-- normal EXEC with COMMIT is allowed with one level - should succeed with
-- unbalanced level warning from 1 to 0
begin tran;
go
select @@trancount;
go
~~START~~
int
1
~~END~~

execute sp_commit_no_begin;
go
~~ROW COUNT: 1~~

~~START~~
int
3
~~END~~

~~ERROR (Code: 33554436)~~

~~ERROR (Message: Transaction count after execution indicates a mismatch number of BEGIN and COMMIT statements. Previous count 1 current count 0)~~

select count(*) from t1;
select count(*) from t2;
go
~~START~~
int
1
~~END~~

~~START~~
int
0
~~END~~


-- two levels - should succeed with unbalanced level warning from 2 to 1, and
-- should not send any Row tokens
select @@trancount;
go
~~START~~
int
0
~~END~~

begin tran;
go
begin tran;
go
select @@trancount;
go
~~START~~
int
2
~~END~~

insert into t2 execute sp_commit_no_begin;
go
~~ERROR (Code: 33554436)~~

~~ERROR (Message: Transaction count after execution indicates a mismatch number of BEGIN and COMMIT statements. Previous count 2 current count 1)~~

select count(*) from t1;
select count(*) from t2;
go
~~START~~
int
2
~~END~~

~~START~~
int
2
~~END~~

select @@trancount;
go
~~START~~
int
1
~~END~~

commit;
go

-- INSERT-EXEC with ROLLBACK in one level of transaction - should fail and abort
-- that level of transaction
begin tran;
go
select @@trancount;
go
~~START~~
int
1
~~END~~

insert into t2 exec sp_rollback_no_begin;
go
~~ERROR (Code: 4)~~

~~ERROR (Message: Cannot use the ROLLBACK statement within an INSERT-EXEC statement.)~~

select @@trancount;
go
~~START~~
int
0
~~END~~


begin tran;
go
select @@trancount;
go
~~START~~
int
1
~~END~~

insert into t2 exec sp_rollback_with_begin;
go
~~ERROR (Code: 4)~~

~~ERROR (Message: Cannot use the ROLLBACK statement within an INSERT-EXEC statement.)~~

select @@trancount;
go
~~START~~
int
0
~~END~~


-- cleanup
drop table t1;
go
drop table t2;
go
drop procedure sp_trancount;
go
drop procedure sp_commit_no_begin;
go
drop procedure sp_rollback_no_begin;
go
drop procedure sp_rollback_with_begin;
go
