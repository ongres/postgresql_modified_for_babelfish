# Executing test ErrorHandling1
CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO



create procedure ErrorHandling1 as
begin
INSERT INTO v550 (c2) VALUES(20)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
DROP VIEW v550
GO

DROP TABLE t550
GO




CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
INSERT INTO v550 (c2) VALUES(20)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP VIEW v550
GO

DROP TABLE t550
GO




-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
INSERT INTO v550 (c2) VALUES(20)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP VIEW v550
GO

DROP TABLE t550
GO


set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Next portion is for runtime error --
CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO



create procedure ErrorHandling1 as
begin
INSERT INTO v550 (c2) VALUES(20)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 550)~~

~~ERROR (Message: The attempted insert or update failed because the target view either specifies WITH CHECK OPTION or spans a view that specifies WITH CHECK OPTION and one or more rows resulting from the operation did not qualify under the CHECK OPTION constraint.)~~

~~START~~
text
STATEMENT TERMINATING ERROR
~~END~~

~~START~~
int
1
~~END~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
DROP VIEW v550
GO

DROP TABLE t550
GO




set xact_abort ON;
GO
# Executing test ErrorHandling10000000
CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO



create procedure ErrorHandling1 as
begin
INSERT INTO v550 (c2) VALUES(20)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 550)~~

~~ERROR (Message: The attempted insert or update failed because the target view either specifies WITH CHECK OPTION or spans a view that specifies WITH CHECK OPTION and one or more rows resulting from the operation did not qualify under the CHECK OPTION constraint.)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP VIEW v550
GO

DROP TABLE t550
GO





set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Error classification is done --
CREATE TABLE t550
(
 c1 int IDENTITY
,c2 int
)
GO

CREATE VIEW v550
AS
SELECT c1, c2 FROM t550 WHERE c2 < 10
WITH CHECK OPTION
GO



begin try
select 1
INSERT INTO v550 (c2) VALUES(20)
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
int
1
~~END~~

~~START~~
smallint
0
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling2', because it does not exist or you do not have permission.)~~

DROP VIEW v550
GO

DROP TABLE t550
GO




