


-- simple batch start
--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
--Generate the error
CONTINUE
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~

--Post
GO

begin transaction
GO


--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
--Generate the error
CONTINUE
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~



-- Below output is only applicable if query is special case. for example, CREATE/ALTER TRIGGER, CREATE/ALTER FUNCTION, CREATE/ALTER PROC, CREATE/ALTER VIEW etc
if (@@trancount > 0) select cast('compile time error' as text) else select cast('runtime error' as text)
GO
~~START~~
text
compile time error
~~END~~


if (@@trancount > 0) rollback tran
GO

--Post
GO

-- simple batch end
GO

create schema error_mapping;
GO
-- Next portion is to check if error is being raised during parse analysis phase
GO

create table error_mapping.temp1 (a int)
GO



--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
create procedure error_mapping.ErrorHandling1 as
begin
insert into error_mapping.temp1 values(1)
--Generate the error
CONTINUE
end
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~


--Post
GO

create table error_mapping.temp2 (a int)
GO



--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
insert into error_mapping.temp2 values(1)
--Generate the error
CONTINUE
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~


--Post
GO

-- Here we are assuming that error_mapping.ErrorHandling1 is created with no error
GO

create table error_mapping.temp3 (a int)
GO



--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
insert into error_mapping.temp3 values(1)
exec error_mapping.ErrorHandling1;
GO
~~ROW COUNT: 1~~

~~ERROR (Code: 2812)~~

~~ERROR (Message: Could not find stored procedure 'error_mapping.ErrorHandling1'.)~~


--Post
GO

if ((select count(*) from error_mapping.temp1) = 0 and (select count(*) from error_mapping.temp2) = 0 and (select count(*) from error_mapping.temp3) > 0) select cast('parse analysis phase error' as text)
GO
~~START~~
text
parse analysis phase error
~~END~~


drop procedure error_mapping.ErrorHandling1;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~

drop table error_mapping.temp1;
drop table error_mapping.temp2;
drop table error_mapping.temp3;
GO

-- Parse analysis phase end
GO




-- compile time error portion
-- Executing test error_mapping.ErrorHandling1
--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO


create procedure error_mapping.ErrorHandling1 as
begin
--Generate the error
CONTINUE
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~


if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
Compile time error
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~

--Post
GO




--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
begin transaction
GO

-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
--Generate the error
CONTINUE
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~


declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH ONLY TERMINATING
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
--Post
GO


-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO


--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO
begin transaction
GO

-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
--Generate the error
CONTINUE
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~


declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH ONLY TERMINATING
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
--Post
GO
set xact_abort OFF;
GO








-- comiple time error portion end --
-- Next portion is for runtime error --
-- Executing test error_mapping.ErrorHandling10000000
--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
--GO
--
--create procedure error_mapping.ErrorHandling1 as
--begin
----Generate the error
--CONTINUE
--if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
--select @@trancount;
--end
--
--GO
--
--if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
--GO
--create procedure error_mapping.ErrorHandling2 as
--begin
--exec error_mapping.ErrorHandling1;
--if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
--end
--
--GO
--
--begin transaction;
--GO
--exec error_mapping.ErrorHandling2;
--GO
--declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
--if @@trancount > 0 rollback transaction;
--drop procedure error_mapping.ErrorHandling1;
--drop procedure error_mapping.ErrorHandling2;
--set xact_abort OFF;
--set implicit_transactions OFF;
--GO
----Post
--GO
--
--
--set xact_abort ON;
--GO
---- Executing test error_mapping.ErrorHandling10000000
----136 CONTINUE when not in WHILE loop
--
----Could not find this error in excel file
--
----Pre
--GO
--
--create procedure error_mapping.ErrorHandling1 as
--begin
----Generate the error
--CONTINUE
--if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
--select @@trancount;
--end
--
--GO
--
--if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
--GO
--create procedure error_mapping.ErrorHandling2 as
--begin
--exec error_mapping.ErrorHandling1;
--if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
--end
--
--GO
--
--begin transaction;
--GO
--exec error_mapping.ErrorHandling2;
--GO
--declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
--if @@trancount > 0 rollback transaction;
--drop procedure error_mapping.ErrorHandling1;
--drop procedure error_mapping.ErrorHandling2;
--set xact_abort OFF;
--set implicit_transactions OFF;
--GO
----Post
--GO
--
--
--
--set xact_abort OFF;
--GO
-- Error classification is done --
-- Executing test error_mapping.ErrorHandling10000000
--136 CONTINUE when not in WHILE loop
--Could not find this error in excel file
--Pre
GO


begin try
select 1
--Generate the error
CONTINUE
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
--drop procedure error_mapping.ErrorHandling1;
--drop procedure error_mapping.ErrorHandling2;
--set xact_abort OFF;
--set implicit_transactions OFF;
--GO
----Post
--GO
--
--
--
GO
~~ERROR (Code: 136)~~

~~ERROR (Message: Cannot use a CONTINUE statement outside the scope of a WHILE statement.)~~

drop schema error_mapping;
GO
