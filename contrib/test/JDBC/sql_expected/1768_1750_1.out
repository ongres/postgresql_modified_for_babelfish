# Executing test ErrorHandling1
CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO


create procedure ErrorHandling1 as
begin
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
DROP VIEW v1768
GO

DROP TABLE t1768_1
GO




CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO
begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP VIEW v1768
GO

DROP TABLE t1768_1
GO




-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO
begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP VIEW v1768
GO

DROP TABLE t1768_1
GO


set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Next portion is for runtime error --
CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO


create procedure ErrorHandling1 as
begin
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 1768)~~

~~ERROR (Message: Foreign key 'fk1768_2' references object 'v1768' which is not a user table.)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP VIEW v1768
GO

DROP TABLE t1768_1
GO




set xact_abort ON;
GO
# Executing test ErrorHandling10000000
CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO


create procedure ErrorHandling1 as
begin
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 1768)~~

~~ERROR (Message: Foreign key 'fk1768_2' references object 'v1768' which is not a user table.)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP VIEW v1768
GO

DROP TABLE t1768_1
GO





set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Error classification is done --
CREATE TABLE t1768_1(
 c1 int NOT NULL
,c2 int NOT NULL
,PRIMARY KEY (c1))
GO

CREATE VIEW v1768
AS
SELECT c1, c2
FROM t1768_1
GO


begin try
select 1
CREATE TABLE t1768_2 (
 c1 int
,c2 int
,CONSTRAINT fk1768_2 FOREIGN KEY (c1) REFERENCES v1768
)
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
int
1
~~END~~

~~START~~
smallint
0
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling1', because it does not exist or you do not have permission.)~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'ErrorHandling2', because it does not exist or you do not have permission.)~~

DROP VIEW v1768
GO

DROP TABLE t1768_1
GO




