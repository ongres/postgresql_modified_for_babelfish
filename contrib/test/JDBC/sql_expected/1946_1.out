
-- simple batch start
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO




INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
GO
~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~

DROP TABLE t1946
GO

begin transaction
GO
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO




INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
GO
~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~



-- Below output is only applicable if query is special case. for example, CREATE/ALTER TRIGGER, CREATE/ALTER FUNCTION, CREATE/ALTER PROC, CREATE/ALTER VIEW etc
if (@@trancount > 0) select cast('compile time error' as text) else select cast('runtime error' as text)
GO
~~START~~
text
runtime error
~~END~~


if (@@trancount > 0) rollback tran
GO

DROP TABLE t1946
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the table 't1946', because it does not exist or you do not have permission.)~~


-- simple batch end
GO

create schema error_mapping;
GO
-- Next portion is to check if error is being raised during parse analysis phase
GO

create table error_mapping.temp1 (a int)
GO

CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO




create procedure error_mapping.ErrorHandling1 as
begin
insert into error_mapping.temp1 values(1)
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
end
GO

DROP TABLE t1946
GO

create table error_mapping.temp2 (a int)
GO

CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO




insert into error_mapping.temp2 values(1)
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
GO
~~ROW COUNT: 1~~

~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~


DROP TABLE t1946
GO

-- Here we are assuming that error_mapping.ErrorHandling1 is created with no error
GO

create table error_mapping.temp3 (a int)
GO

CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO
insert into error_mapping.temp3 values(1)
exec error_mapping.ErrorHandling1;
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~


DROP TABLE t1946
GO

if ((select count(*) from error_mapping.temp1) = 0 and (select count(*) from error_mapping.temp2) = 0 and (select count(*) from error_mapping.temp3) > 0) select cast('parse analysis phase error' as text)
GO

drop procedure error_mapping.ErrorHandling1;
GO
drop table error_mapping.temp1;
drop table error_mapping.temp2;
drop table error_mapping.temp3;
GO

-- Parse analysis phase end
GO


-- compile time error portion
-- Executing test error_mapping.ErrorHandling1
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO






create procedure error_mapping.ErrorHandling1 as
begin
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
DROP TABLE t1946
GO


CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO
begin transaction
GO





-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP TABLE t1946
GO


-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO
begin transaction
GO





-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~


GO
DROP TABLE t1946
GO
set xact_abort OFF;
GO


-- comiple time error portion end --
-- Next portion is for runtime error --
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO






create procedure error_mapping.ErrorHandling1 as
begin
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure error_mapping.ErrorHandling2 as
begin
exec error_mapping.ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec error_mapping.ErrorHandling2;
GO
~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP TABLE t1946
GO


set xact_abort ON;
GO
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO






create procedure error_mapping.ErrorHandling1 as
begin
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure error_mapping.ErrorHandling2 as
begin
exec error_mapping.ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec error_mapping.ErrorHandling2;
GO
~~ERROR (Code: 1946)~~

~~ERROR (Message: Operation failed. The index entry of length 3004 bytes for the index 'ix1946' exceeds the maximum length of 900 bytes.)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP TABLE t1946
GO



set xact_abort OFF;
GO


-- Error classification is done --
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t1946
(c1 int IDENTITY
,c2 varchar(500)
,c3 varchar(500)
,c4 varchar(500)
,c5 varchar(500)
,c6 varchar(500)
,c7 varchar(500)
)
GO

CREATE INDEX ix1946 ON t1946(c1, c2, c3, c4, c5, c6, c7)
GO






begin try
select 1
INSERT INTO t1946(c2, c3, c4, c5, c6, c7)
VALUES(
 REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
,REPLICATE('a', 500)
)
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
int
1
~~END~~

~~START~~
smallint
0
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling1', because it does not exist or you do not have permission.)~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: Cannot drop the procedure 'error_mapping.ErrorHandling2', because it does not exist or you do not have permission.)~~

DROP TABLE t1946
GO



GO
drop schema error_mapping;
GO
