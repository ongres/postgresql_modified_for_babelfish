USE master
GO

# Executing test ErrorHandling1
CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO



create procedure ErrorHandling1 as
begin
DROP FUNCTION s3729.f3729
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO


CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
DROP FUNCTION s3729.f3729
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~


GO
DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO


-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
DROP FUNCTION s3729.f3729
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~


GO
DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO
set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Next portion is for runtime error --
CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO



create procedure ErrorHandling1 as
begin
DROP FUNCTION s3729.f3729
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 3729)~~

~~ERROR (Message: cannot drop function master_s3729.f3729() because other objects depend on it)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO


set xact_abort ON;
GO
# Executing test ErrorHandling10000000
CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO



create procedure ErrorHandling1 as
begin
DROP FUNCTION s3729.f3729
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 3729)~~

~~ERROR (Message: cannot drop function master_s3729.f3729() because other objects depend on it)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO



set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Error classification is done --
CREATE SCHEMA s3729
GO

CREATE FUNCTION s3729.f3729 ()
RETURNS INT
AS
BEGIN
   RETURN 123 ;
END;
GO

CREATE TABLE t3729(c1 int default s3729.f3729())
GO



begin try
select 1
DROP FUNCTION s3729.f3729
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
int
1
~~END~~

~~START~~
smallint
0
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling2")~~

DROP TABLE t3729
GO
DROP FUNCTION s3729.f3729
GO
DROP SCHEMA s3729
GO


