USE master;
GO


-- simple batch start
CREATE TABLE t129(id int)
GO
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<EOF>' at line 4 and character position 0)~~

DROP TABLE t129 
GO

begin transaction
GO
CREATE TABLE t129(id int)
GO
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<EOF>' at line 4 and character position 0)~~



-- Below output is only applicable if query is special case. for example, CREATE/ALTER TRIGGER, CREATE/ALTER FUNCTION, CREATE/ALTER PROC, CREATE/ALTER VIEW etc
if (@@trancount > 0) select cast('compile time error' as text) else select cast('runtime error' as text)
GO
~~START~~
text
runtime error
~~END~~


if (@@trancount > 0) rollback tran
GO

DROP TABLE t129 
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: table "t129" does not exist)~~


-- simple batch end
GO

create schema error_mapping;
GO
-- Next portion is to check if error is being raised during parse analysis phase
GO

create table error_mapping.temp1 (a int)
GO

CREATE TABLE t129(id int)
GO
create procedure error_mapping.ErrorHandling1 as
begin
insert into error_mapping.temp1 values(1)
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'end' at line 7 and character position 0)~~


DROP TABLE t129 
GO

create table error_mapping.temp2 (a int)
GO

CREATE TABLE t129(id int)
GO
insert into error_mapping.temp2 values(1)
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<EOF>' at line 5 and character position 0)~~


DROP TABLE t129 
GO

-- Here we are assuming that error_mapping.ErrorHandling1 is created with no error
GO

create table error_mapping.temp3 (a int)
GO

CREATE TABLE t129(id int)
GO
insert into error_mapping.temp3 values(1)
exec error_mapping.ErrorHandling1;
GO
~~ROW COUNT: 1~~

~~ERROR (Code: 33557097)~~

~~ERROR (Message: procedure master_error_mapping.errorhandling1() does not exist)~~


DROP TABLE t129 
GO

if ((select count(*) from error_mapping.temp1) = 0 and (select count(*) from error_mapping.temp2) = 0 and (select count(*) from error_mapping.temp3) > 0) select cast('parse analysis phase error' as text)
GO
~~START~~
text
parse analysis phase error
~~END~~


drop procedure error_mapping.ErrorHandling1;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~

drop table error_mapping.temp1;
drop table error_mapping.temp2;
drop table error_mapping.temp3;
GO

-- Parse analysis phase end
GO


-- compile time error portion
-- Executing test error_mapping.ErrorHandling1
CREATE TABLE t129(id int)
GO


create procedure error_mapping.ErrorHandling1 as
begin
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'if' at line 6 and character position 0)~~


if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
Compile time error
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~

DROP TABLE t129 
GO


CREATE TABLE t129(id int)
GO
begin transaction
GO

-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'if' at line 7 and character position 0)~~


declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~


GO
DROP TABLE t129 
GO


-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
CREATE TABLE t129(id int)
GO
begin transaction
GO

-- Executing test error_mapping.ErrorHandling1
create procedure error_mapping.ErrorHandling1 as
begin
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'if' at line 7 and character position 0)~~


declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~


GO
DROP TABLE t129 
GO
set xact_abort OFF;
GO


-- comiple time error portion end --
-- Next portion is for runtime error --
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t129(id int)
GO


create procedure error_mapping.ErrorHandling1 as
begin
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'if' at line 6 and character position 0)~~


if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO
~~START~~
text
CURRENT BATCH TERMINATING ERROR
~~END~~


create procedure error_mapping.ErrorHandling2 as
begin
exec error_mapping.ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec error_mapping.ErrorHandling2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: procedure master_error_mapping.errorhandling1() does not exist)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~

DROP TABLE t129 
GO


set xact_abort ON;
GO
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t129(id int)
GO


create procedure error_mapping.ErrorHandling1 as
begin
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'if' at line 6 and character position 0)~~


if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO
~~START~~
text
CURRENT BATCH TERMINATING ERROR
~~END~~


create procedure error_mapping.ErrorHandling2 as
begin
exec error_mapping.ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec error_mapping.ErrorHandling2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: procedure master_error_mapping.errorhandling1() does not exist)~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "master_error_mapping.errorhandling1")~~

DROP TABLE t129 
GO



set xact_abort OFF;
GO


-- Error classification is done --
-- Executing test error_mapping.ErrorHandling10000000
CREATE TABLE t129(id int)
GO


begin try
select 1
CREATE INDEX i129 ON t129 (id)
WITH (FILLFACTOR = 1000)
GO 
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure error_mapping.ErrorHandling1;
drop procedure error_mapping.ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'end' at line 6 and character position 0)~~

DROP TABLE t129 
GO



GO
drop schema error_mapping;
GO
